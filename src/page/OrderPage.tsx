import {
  Box,
  Button,
  Container,
  MenuItem,
  Snackbar,
  Typography,
  Divider,
  Alert,
} from '@mui/material';
import { useDispatch, useSelector } from 'react-redux';
import { useEffect, useState } from 'react';
import {
  createOrderStart,
  createCardStart,
  requestSmsStart,
  paymentStart,
  prevStep,
  paymentSuccess,
} from '../features/order/orderSlice';
import { CreateOrderPayload } from '../features/order/orderTypes';
import { RootState } from '../store/store';
import { fetchCartStart } from '../features/cart/cartSlice';
import { getMeStart } from '../features/auth/authSlice';
import { StyledTextField } from '../components/Login';

export default function OrderPage() {
  const dispatch = useDispatch();
  const { step } = useSelector((s: RootState) => s.order);
  const cartItems = useSelector((s: RootState) => s.cart.items);
  const user = useSelector((s: RootState) => s.auth.user);
  const totalAmount = cartItems.reduce((sum, i) => sum + i.product.price * i.quantity, 0);

  // Form state
  const [form, setForm] = useState<CreateOrderPayload>({
    amount: 0,
    payment_type: 1,
    delivery_type: 1,
    use_cashback: false,
    receiver: {
      first_name: '',
      last_name: '',
      phone: '',
      longitude: 0,
      latitude: 0,
      address: '',
    },
    items: [],
  });

  // Card + SMS
  const [card, setCard] = useState({ card_number: '', expire: '' });
  const [smsCode, setSmsCode] = useState('');

  // Snackbars
  const [emptyCartOpen, setEmptyCartOpen] = useState(false);
  const [successOpen, setSuccessOpen] = useState(false);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  useEffect(() => {
    dispatch(fetchCartStart());
    dispatch(getMeStart());
  }, [dispatch]);

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã –ø—Ä–∏ —Å–º–µ–Ω–µ –∫–æ—Ä–∑–∏–Ω—ã –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  useEffect(() => {
    if (user && cartItems.length > 0) {
      setForm({
        amount: totalAmount,
        payment_type: 1,
        delivery_type: 1,
        use_cashback: false,
        receiver: {
          first_name: user.first_name,
          last_name: user.last_name,
          phone: user.phone,
          longitude: 0,
          latitude: 0,
          address: '',
        },
        items: cartItems.map((item) => ({
          product: item.product.id,
          price: item.product.price,
          quantity: item.quantity,
        })),
      });
    }
  }, [user, cartItems, totalAmount]);

  // –û—Ç–∫—Ä—ã—Ç—å Snackbar "–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ" –∫–æ–≥–¥–∞ step –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –≤ done
  useEffect(() => {
    if (step === 'done') {
      setSuccessOpen(true);
    }
  }, [step]);

  const handleSubmit = () => {
    if (cartItems.length === 0) {
      setEmptyCartOpen(true);
      return;
    }
    if (form.delivery_type === 2 && !form.receiver.address) {
      alert('–ê–¥—Ä–µ—Å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω!');
      return;
    }
    dispatch(createOrderStart(form));
    if (form.payment_type === 2) {
      dispatch(paymentSuccess());
    }
  };

  const handleCard = () => {
    dispatch(createCardStart(card));
    dispatch(requestSmsStart());
  };

  const handlePayment = () => {
    dispatch(paymentStart(smsCode));
  };

  return (
    <Container
      maxWidth="sm"
      sx={{
        maxWidth: 360,
        mx: 'auto',
        mt: 8,
        px: 3,
        py: 6,
        boxShadow: 1,
        borderRadius: 2,
        background: 'var(--main-background-color)',
      }}
    >
      <Button variant="text" onClick={() => dispatch(prevStep())}>
        ‚Üê –ù–∞–∑–∞–¥
      </Button>

      {step === 'order' && (
        <Box>
          <Typography variant="h5" gutterBottom>
            –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
          </Typography>

          {cartItems.map((item) => (
            <Box key={item.id} sx={{ mb: 1 }}>
              <Typography>{item.product.name}</Typography>
              <Typography variant="body2">
                {item.product.price} —Å—É–º √ó {item.quantity} ={' '}
                {item.product.price * item.quantity} —Å—É–º
              </Typography>
              <Divider sx={{ my: 1 }} />
            </Box>
          ))}

          <Typography variant="h6">–ò—Ç–æ–≥–æ: {totalAmount} —Å—É–º</Typography>
          <Typography variant="h6">
            –ê–¥—Ä–µ—Å –º–∞–≥–∞–∑–∏–Ω–∞: FJ65+C75, –ù—É–∫—É—Å, –†–µ—Å–ø—É–±–ª–∏–∫–∞ –ö–∞—Ä–∞–∫–∞–ª–ø–∞–∫—Å—Ç–∞–Ω, –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω
          </Typography>

          <StyledTextField
            label="–ò–º—è"
            fullWidth
            margin="normal"
            value={form.receiver.first_name}
            onChange={(e) =>
              setForm({
                ...form,
                receiver: { ...form.receiver, first_name: e.target.value },
              })
            }
          />
          <StyledTextField
            label="–§–∞–º–∏–ª–∏—è"
            fullWidth
            margin="normal"
            value={form.receiver.last_name}
            onChange={(e) =>
              setForm({
                ...form,
                receiver: { ...form.receiver, last_name: e.target.value },
              })
            }
          />
          <StyledTextField
            label="–¢–µ–ª–µ—Ñ–æ–Ω"
            fullWidth
            margin="normal"
            value={form.receiver.phone}
            onChange={(e) =>
              setForm({
                ...form,
                receiver: { ...form.receiver, phone: e.target.value },
              })
            }
          />

          <StyledTextField
            label="–¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏"
            fullWidth
            select
            margin="normal"
            value={form.delivery_type}
            onChange={(e) =>
              setForm({
                ...form,
                delivery_type: +e.target.value as 1 | 2,
              })
            }
          >
            <MenuItem value={1}>–°–∞–º–æ–≤—ã–≤–æ–∑</MenuItem>
            <MenuItem value={2}>–ö—É—Ä—å–µ—Ä</MenuItem>
          </StyledTextField>

          {form.delivery_type === 2 && (
            <StyledTextField
              label="–ê–¥—Ä–µ—Å"
              fullWidth
              margin="normal"
              required
              value={form.receiver.address}
              onChange={(e) =>
                setForm({
                  ...form,
                  receiver: { ...form.receiver, address: e.target.value },
                })
              }
            />
          )}

          <StyledTextField
            label="–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã"
            fullWidth
            select
            margin="normal"
            value={form.payment_type}
            onChange={(e) =>
              setForm({
                ...form,
                payment_type: +e.target.value as 1 | 2,
              })
            }
          >
            <MenuItem value={1}>–û–Ω–ª–∞–π–Ω</MenuItem>
            <MenuItem value={2}>–ù–∞–ª–∏—á–Ω—ã–µ / –ö–∞—Ä—Ç–∞</MenuItem>
          </StyledTextField>

          <Button
            fullWidth
            variant="contained"
            sx={{ mt: 2 }}
            onClick={handleSubmit}
            disabled={cartItems.length === 0}
          >
            –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑
          </Button>
        </Box>
      )}

      {form.payment_type === 1 && step === 'card' && (
        <Box sx={{ mt: 4 }}>
          <Typography variant="h6">üí≥ –û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π</Typography>

          <StyledTextField
            label="–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã"
            fullWidth
            margin="normal"
            value={card.card_number}
            onChange={(e) =>
              setCard({ ...card, card_number: e.target.value })
            }
          />
          <StyledTextField
            label="–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è (MM/YY)"
            fullWidth
            margin="normal"
            value={card.expire}
            onChange={(e) => setCard({ ...card, expire: e.target.value })}
          />

          <Button
            fullWidth
            variant="outlined"
            sx={{ mt: 2 }}
            onClick={handleCard}
          >
            üì© –ó–∞–ø—Ä–æ—Å–∏—Ç—å SMS –∫–æ–¥
          </Button>
        </Box>
      )}

      {step === 'sms' && (
        <Box sx={{ mt: 4 }}>
          <Typography variant="h6">üì± –í–≤–µ–¥–∏—Ç–µ SMS –∫–æ–¥</Typography>
          <StyledTextField
            label="SMS –∫–æ–¥"
            fullWidth
            margin="normal"
            value={smsCode}
            onChange={(e) => setSmsCode(e.target.value)}
          />

          <Button
            fullWidth
            variant="contained"
            sx={{ mt: 2 }}
            onClick={handlePayment}
          >
            üí∞ –û–ø–ª–∞—Ç–∏—Ç—å
          </Button>
        </Box>
      )}

      {step === 'done' && (
        <Typography variant="h5" color="green" sx={{ mt: 4 }}>
          ‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!
        </Typography>
      )}

      {/* Snackbar: –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞ */}
      <Snackbar
        open={emptyCartOpen}
        autoHideDuration={3000}
        onClose={() => setEmptyCartOpen(false)}
        anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}
      >
        <Alert
          severity="warning"
          onClose={() => setEmptyCartOpen(false)}
          sx={{ width: '100%' }}
        >
          –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!
        </Alert>
      </Snackbar>

      {/* Snackbar: –æ–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–∞ */}
      <Snackbar
        open={successOpen}
        autoHideDuration={3000}
        onClose={() => setSuccessOpen(false)}
        anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}
      >
        <Alert
          severity="success"
          onClose={() => setSuccessOpen(false)}
          sx={{ width: '100%' }}
        >
          –ó–∞–∫–∞–∑ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!
        </Alert>
      </Snackbar>
    </Container>
  );
}
